rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isVerified() {
      return request.auth.token.email_verified == true;
    }
    
    function isCurrentUser(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if user is member of a group
    function isGroupMember(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return groupData.members.hasAny([request.auth.uid]);
    }
    
    // Check if user is admin of a group
    function isGroupAdmin(groupId) {
      let groupData = get(/databases/$(database)/documents/groups/$(groupId)).data;
      return groupData.admins.hasAny([request.auth.uid]);
    }
    
    // Rules for User collection
    match /Users/{userId} {
      allow read: if isSignedIn();
      allow create: if isCurrentUser(userId);
      allow update: if isCurrentUser(userId);
      allow delete: if false; // Prevent user deletion
    }
    
    // Rules for usernames collection (ensure uniqueness)
    match /usernames/{username} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() 
                         && isVerified() 
                         && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() 
                 && get(/databases/$(database)/documents/usernames/$(username)).data.uid == request.auth.uid;
    }
    
    // Rules for chat rooms
    match /chat_rooms/{roomId} {
      allow read: if isSignedIn() 
               && roomId.split('_').hasAny([request.auth.uid]);
      allow create, update: if isSignedIn() && isVerified();
      allow delete: if false; // Prevent chat room deletion
      
      // Allow access to messages in a chat room
      match /messages/{messageId} {
        allow read: if isSignedIn() 
                 && roomId.split('_').hasAny([request.auth.uid]);
        allow create: if isSignedIn() 
                   && isVerified() 
                   && request.resource.data.senderEmail == request.auth.token.email;
        allow update, delete: if false; // Prevent message modification
      }
    }
    
    // Rules for groups
    match /groups/{groupId} {
      allow read: if isSignedIn() && isGroupMember(groupId);
      allow create: if isSignedIn() && isVerified();
      allow update: if isSignedIn() && isGroupAdmin(groupId);
      allow delete: if isSignedIn() && isGroupAdmin(groupId);
      
      // Allow access to messages in a group
      match /messages/{messageId} {
        allow read: if isSignedIn() && isGroupMember(groupId);
        allow create: if isSignedIn() 
                   && isVerified() 
                   && isGroupMember(groupId) 
                   && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false; // Prevent message modification
      }
    }
  }
}